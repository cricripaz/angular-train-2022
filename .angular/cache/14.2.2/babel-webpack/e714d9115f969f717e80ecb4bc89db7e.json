{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpParams, HttpRequest, HttpErrorResponse } from \"@angular/common/http\";\nimport { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../pages/services/auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n    }\n\n    intercept(request, next) {\n      const token = this.authService.getToken();\n\n      if (token) {\n        let params = new HttpParams();\n        params = params.append('auth', token);\n        request = request.clone({\n          url: request.url,\n          params: params\n        });\n      }\n\n      return next.handle(request).pipe(catchError(err => {\n        if (err.status === 401) {\n          this.handler401Error();\n        }\n\n        return throwError('ERROR');\n      }));\n    }\n\n    handler401Error() {\n      this.authService.logout();\n      return throwError('ERROR 401');\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}